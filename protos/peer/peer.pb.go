// Code generated by protoc-gen-go.
// source: protos/peer/peer.proto
// DO NOT EDIT!

/*
Package peer is a generated protocol buffer package.

It is generated from these files:
	protos/peer/peer.proto

It has these top-level messages:
	DeployRequest
	DeployResponse
	FetchRequest
	FetchResponse
	FragInfoRequest
	FragInfoResponse
*/
package peer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DeployResponse_Status int32

const (
	DeployResponse_ERROR DeployResponse_Status = 0
	DeployResponse_OK    DeployResponse_Status = 1
)

var DeployResponse_Status_name = map[int32]string{
	0: "ERROR",
	1: "OK",
}
var DeployResponse_Status_value = map[string]int32{
	"ERROR": 0,
	"OK":    1,
}

func (x DeployResponse_Status) String() string {
	return proto.EnumName(DeployResponse_Status_name, int32(x))
}
func (DeployResponse_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type FragInfoRequest_InfoType int32

const (
	FragInfoRequest_ALL  FragInfoRequest_InfoType = 0
	FragInfoRequest_FRAG FragInfoRequest_InfoType = 1
)

var FragInfoRequest_InfoType_name = map[int32]string{
	0: "ALL",
	1: "FRAG",
}
var FragInfoRequest_InfoType_value = map[string]int32{
	"ALL":  0,
	"FRAG": 1,
}

func (x FragInfoRequest_InfoType) String() string {
	return proto.EnumName(FragInfoRequest_InfoType_name, int32(x))
}
func (FragInfoRequest_InfoType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type FragInfoResponse_Status int32

const (
	FragInfoResponse_NOT_FOUND FragInfoResponse_Status = 0
	FragInfoResponse_OK        FragInfoResponse_Status = 1
	FragInfoResponse_NOT_READY FragInfoResponse_Status = 2
	FragInfoResponse_ERROR     FragInfoResponse_Status = 3
)

var FragInfoResponse_Status_name = map[int32]string{
	0: "NOT_FOUND",
	1: "OK",
	2: "NOT_READY",
	3: "ERROR",
}
var FragInfoResponse_Status_value = map[string]int32{
	"NOT_FOUND": 0,
	"OK":        1,
	"NOT_READY": 2,
	"ERROR":     3,
}

func (x FragInfoResponse_Status) String() string {
	return proto.EnumName(FragInfoResponse_Status_name, int32(x))
}
func (FragInfoResponse_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

type DeployRequest struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	FragIndex uint64 `protobuf:"varint,2,opt,name=frag_index,json=fragIndex" json:"frag_index,omitempty"`
	Data      []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *DeployRequest) Reset()                    { *m = DeployRequest{} }
func (m *DeployRequest) String() string            { return proto.CompactTextString(m) }
func (*DeployRequest) ProtoMessage()               {}
func (*DeployRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DeployRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeployRequest) GetFragIndex() uint64 {
	if m != nil {
		return m.FragIndex
	}
	return 0
}

func (m *DeployRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type DeployResponse struct {
	Status DeployResponse_Status `protobuf:"varint,1,opt,name=status,enum=cn.zumium.fyer.peer.DeployResponse_Status" json:"status,omitempty"`
	Msg    string                `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *DeployResponse) Reset()                    { *m = DeployResponse{} }
func (m *DeployResponse) String() string            { return proto.CompactTextString(m) }
func (*DeployResponse) ProtoMessage()               {}
func (*DeployResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DeployResponse) GetStatus() DeployResponse_Status {
	if m != nil {
		return m.Status
	}
	return DeployResponse_ERROR
}

func (m *DeployResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type FetchRequest struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	FragIndex uint64 `protobuf:"varint,2,opt,name=frag_index,json=fragIndex" json:"frag_index,omitempty"`
}

func (m *FetchRequest) Reset()                    { *m = FetchRequest{} }
func (m *FetchRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchRequest) ProtoMessage()               {}
func (*FetchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FetchRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FetchRequest) GetFragIndex() uint64 {
	if m != nil {
		return m.FragIndex
	}
	return 0
}

type FetchResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *FetchResponse) Reset()                    { *m = FetchResponse{} }
func (m *FetchResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchResponse) ProtoMessage()               {}
func (*FetchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FetchResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type FragInfoRequest struct {
	Name      string                   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Itype     FragInfoRequest_InfoType `protobuf:"varint,2,opt,name=itype,enum=cn.zumium.fyer.peer.FragInfoRequest_InfoType" json:"itype,omitempty"`
	FragIndex uint64                   `protobuf:"varint,3,opt,name=frag_index,json=fragIndex" json:"frag_index,omitempty"`
}

func (m *FragInfoRequest) Reset()                    { *m = FragInfoRequest{} }
func (m *FragInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*FragInfoRequest) ProtoMessage()               {}
func (*FragInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FragInfoRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FragInfoRequest) GetItype() FragInfoRequest_InfoType {
	if m != nil {
		return m.Itype
	}
	return FragInfoRequest_ALL
}

func (m *FragInfoRequest) GetFragIndex() uint64 {
	if m != nil {
		return m.FragIndex
	}
	return 0
}

type FragInfoResponse struct {
	Status FragInfoResponse_Status            `protobuf:"varint,1,opt,name=status,enum=cn.zumium.fyer.peer.FragInfoResponse_Status" json:"status,omitempty"`
	Msg    string                             `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Infos  map[uint64]*FragInfoResponse_FInfo `protobuf:"bytes,3,rep,name=infos" json:"infos,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *FragInfoResponse) Reset()                    { *m = FragInfoResponse{} }
func (m *FragInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*FragInfoResponse) ProtoMessage()               {}
func (*FragInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FragInfoResponse) GetStatus() FragInfoResponse_Status {
	if m != nil {
		return m.Status
	}
	return FragInfoResponse_NOT_FOUND
}

func (m *FragInfoResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *FragInfoResponse) GetInfos() map[uint64]*FragInfoResponse_FInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

type FragInfoResponse_FInfo struct {
	FragIndex uint64 `protobuf:"varint,1,opt,name=frag_index,json=fragIndex" json:"frag_index,omitempty"`
	Hash      []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *FragInfoResponse_FInfo) Reset()                    { *m = FragInfoResponse_FInfo{} }
func (m *FragInfoResponse_FInfo) String() string            { return proto.CompactTextString(m) }
func (*FragInfoResponse_FInfo) ProtoMessage()               {}
func (*FragInfoResponse_FInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

func (m *FragInfoResponse_FInfo) GetFragIndex() uint64 {
	if m != nil {
		return m.FragIndex
	}
	return 0
}

func (m *FragInfoResponse_FInfo) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func init() {
	proto.RegisterType((*DeployRequest)(nil), "cn.zumium.fyer.peer.DeployRequest")
	proto.RegisterType((*DeployResponse)(nil), "cn.zumium.fyer.peer.DeployResponse")
	proto.RegisterType((*FetchRequest)(nil), "cn.zumium.fyer.peer.FetchRequest")
	proto.RegisterType((*FetchResponse)(nil), "cn.zumium.fyer.peer.FetchResponse")
	proto.RegisterType((*FragInfoRequest)(nil), "cn.zumium.fyer.peer.FragInfoRequest")
	proto.RegisterType((*FragInfoResponse)(nil), "cn.zumium.fyer.peer.FragInfoResponse")
	proto.RegisterType((*FragInfoResponse_FInfo)(nil), "cn.zumium.fyer.peer.FragInfoResponse.FInfo")
	proto.RegisterEnum("cn.zumium.fyer.peer.DeployResponse_Status", DeployResponse_Status_name, DeployResponse_Status_value)
	proto.RegisterEnum("cn.zumium.fyer.peer.FragInfoRequest_InfoType", FragInfoRequest_InfoType_name, FragInfoRequest_InfoType_value)
	proto.RegisterEnum("cn.zumium.fyer.peer.FragInfoResponse_Status", FragInfoResponse_Status_name, FragInfoResponse_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FyerPeer service

type FyerPeerClient interface {
	Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error)
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error)
	FragInfo(ctx context.Context, in *FragInfoRequest, opts ...grpc.CallOption) (*FragInfoResponse, error)
}

type fyerPeerClient struct {
	cc *grpc.ClientConn
}

func NewFyerPeerClient(cc *grpc.ClientConn) FyerPeerClient {
	return &fyerPeerClient{cc}
}

func (c *fyerPeerClient) Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error) {
	out := new(DeployResponse)
	err := grpc.Invoke(ctx, "/cn.zumium.fyer.peer.FyerPeer/Deploy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fyerPeerClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error) {
	out := new(FetchResponse)
	err := grpc.Invoke(ctx, "/cn.zumium.fyer.peer.FyerPeer/Fetch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fyerPeerClient) FragInfo(ctx context.Context, in *FragInfoRequest, opts ...grpc.CallOption) (*FragInfoResponse, error) {
	out := new(FragInfoResponse)
	err := grpc.Invoke(ctx, "/cn.zumium.fyer.peer.FyerPeer/FragInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FyerPeer service

type FyerPeerServer interface {
	Deploy(context.Context, *DeployRequest) (*DeployResponse, error)
	Fetch(context.Context, *FetchRequest) (*FetchResponse, error)
	FragInfo(context.Context, *FragInfoRequest) (*FragInfoResponse, error)
}

func RegisterFyerPeerServer(s *grpc.Server, srv FyerPeerServer) {
	s.RegisterService(&_FyerPeer_serviceDesc, srv)
}

func _FyerPeer_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FyerPeerServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cn.zumium.fyer.peer.FyerPeer/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FyerPeerServer).Deploy(ctx, req.(*DeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FyerPeer_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FyerPeerServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cn.zumium.fyer.peer.FyerPeer/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FyerPeerServer).Fetch(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FyerPeer_FragInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FragInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FyerPeerServer).FragInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cn.zumium.fyer.peer.FyerPeer/FragInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FyerPeerServer).FragInfo(ctx, req.(*FragInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FyerPeer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cn.zumium.fyer.peer.FyerPeer",
	HandlerType: (*FyerPeerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Deploy",
			Handler:    _FyerPeer_Deploy_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _FyerPeer_Fetch_Handler,
		},
		{
			MethodName: "FragInfo",
			Handler:    _FyerPeer_FragInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/peer/peer.proto",
}

func init() { proto.RegisterFile("protos/peer/peer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x54, 0x5d, 0x8f, 0x93, 0x40,
	0x14, 0xdd, 0x29, 0x05, 0xcb, 0xdd, 0xb6, 0x92, 0x31, 0x31, 0x0d, 0x66, 0x93, 0x3a, 0xab, 0x49,
	0xe3, 0x07, 0x1a, 0x7c, 0xd1, 0x7d, 0x63, 0x6d, 0x31, 0xc6, 0x4d, 0xab, 0xe3, 0xaa, 0xd1, 0x97,
	0x0d, 0xee, 0xde, 0x6e, 0x1b, 0xb7, 0x80, 0x0c, 0x18, 0xf1, 0xd5, 0xc4, 0x67, 0x7f, 0x86, 0x3f,
	0xd3, 0xcc, 0x00, 0x76, 0x25, 0x4d, 0x25, 0xbe, 0x90, 0xcb, 0x65, 0xce, 0x99, 0x73, 0x66, 0xce,
	0x05, 0xae, 0xc7, 0x49, 0x94, 0x46, 0xe2, 0x41, 0x8c, 0x98, 0xa8, 0x87, 0xa3, 0x1a, 0xf4, 0xda,
	0x69, 0xe8, 0x7c, 0xcb, 0x56, 0xcb, 0x6c, 0xe5, 0xcc, 0x73, 0xd9, 0x45, 0x4c, 0xd8, 0x5b, 0xe8,
	0x8d, 0x31, 0xbe, 0x88, 0x72, 0x8e, 0x9f, 0x33, 0x14, 0x29, 0xa5, 0xd0, 0x0e, 0x83, 0x15, 0x0e,
	0xc8, 0x90, 0x8c, 0x4c, 0xae, 0x6a, 0xba, 0x07, 0x30, 0x4f, 0x82, 0xf3, 0x93, 0x65, 0x78, 0x86,
	0x5f, 0x07, 0xad, 0x21, 0x19, 0xb5, 0xb9, 0x29, 0x3b, 0xcf, 0x65, 0x43, 0x42, 0xce, 0x82, 0x34,
	0x18, 0x68, 0x43, 0x32, 0xea, 0x72, 0x55, 0xb3, 0xef, 0x04, 0xfa, 0x15, 0xb1, 0x88, 0xa3, 0x50,
	0x20, 0x3d, 0x04, 0x43, 0xa4, 0x41, 0x9a, 0x09, 0xc5, 0xdd, 0x77, 0xef, 0x38, 0x1b, 0x04, 0x39,
	0x7f, 0x83, 0x9c, 0xd7, 0x0a, 0xc1, 0x4b, 0x24, 0xb5, 0x40, 0x5b, 0x89, 0x73, 0x25, 0xc1, 0xe4,
	0xb2, 0x64, 0x37, 0xc0, 0x28, 0xd6, 0x50, 0x13, 0xf4, 0x09, 0xe7, 0x33, 0x6e, 0xed, 0x50, 0x03,
	0x5a, 0xb3, 0x17, 0x16, 0x61, 0x1e, 0x74, 0x7d, 0x4c, 0x4f, 0x17, 0xff, 0x6f, 0x8e, 0xed, 0x43,
	0xaf, 0xa4, 0x28, 0x6d, 0x54, 0x6e, 0xc9, 0x25, 0xb7, 0xbf, 0x08, 0x5c, 0xf5, 0x15, 0x64, 0x1e,
	0x6d, 0xdb, 0xeb, 0x29, 0xe8, 0xcb, 0x34, 0x8f, 0x51, 0x6d, 0xd3, 0x77, 0xef, 0x6f, 0x3c, 0x81,
	0x1a, 0x91, 0x23, 0xeb, 0xe3, 0x3c, 0x46, 0x5e, 0x60, 0x6b, 0x82, 0xb5, 0xba, 0xe0, 0x3d, 0xe8,
	0x54, 0x08, 0x7a, 0x05, 0x34, 0xef, 0xe8, 0xc8, 0xda, 0xa1, 0x1d, 0x68, 0xfb, 0xdc, 0x7b, 0x66,
	0x11, 0xf6, 0x53, 0x03, 0x6b, 0xbd, 0x43, 0xe9, 0x69, 0x5c, 0xbb, 0x9a, 0x7b, 0xff, 0x10, 0xd6,
	0xf0, 0x72, 0xa8, 0x0f, 0xfa, 0x32, 0x9c, 0x47, 0x62, 0xa0, 0x0d, 0xb5, 0xd1, 0xae, 0xfb, 0xb0,
	0x19, 0xad, 0x7c, 0x11, 0x93, 0x30, 0x4d, 0x72, 0x5e, 0xc0, 0xed, 0x03, 0xd0, 0x7d, 0xd9, 0xad,
	0x79, 0x27, 0x1b, 0x92, 0xb8, 0x08, 0xc4, 0x42, 0x49, 0xe8, 0x72, 0x55, 0xdb, 0x08, 0xb0, 0x26,
	0x94, 0x1a, 0x3f, 0x61, 0x5e, 0x22, 0x65, 0x49, 0x3d, 0xd0, 0xbf, 0x04, 0x17, 0x59, 0x71, 0x27,
	0xbb, 0xee, 0xdd, 0x66, 0x1a, 0x95, 0x1c, 0x5e, 0x20, 0x0f, 0x5a, 0x8f, 0x09, 0x7b, 0xf2, 0x27,
	0x87, 0x3d, 0x30, 0xa7, 0xb3, 0xe3, 0x13, 0x7f, 0xf6, 0x66, 0x3a, 0x5e, 0x67, 0xb1, 0x6a, 0xf3,
	0x89, 0x37, 0x7e, 0x6f, 0xb5, 0xd6, 0x69, 0xd5, 0xdc, 0x1f, 0x2d, 0xe8, 0xf8, 0x39, 0x26, 0x2f,
	0x11, 0x13, 0xfa, 0x0a, 0x8c, 0x62, 0x04, 0x28, 0xdb, 0x3a, 0x1f, 0x2a, 0x1b, 0xf6, 0x7e, 0x83,
	0x19, 0xa2, 0x53, 0xd0, 0x55, 0x84, 0xe9, 0xcd, 0xcd, 0xde, 0x2e, 0x4d, 0x88, 0xcd, 0xb6, 0x2d,
	0x29, 0xf9, 0xde, 0x41, 0xa7, 0x3a, 0x0f, 0x7a, 0xab, 0x49, 0x84, 0xed, 0xdb, 0x8d, 0x0e, 0xf5,
	0xd0, 0xf8, 0xd0, 0x96, 0x1f, 0x3e, 0x1a, 0xea, 0x87, 0xf5, 0xe8, 0x77, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x54, 0x64, 0x49, 0x75, 0xca, 0x04, 0x00, 0x00,
}
