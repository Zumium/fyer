// Code generated by protoc-gen-go.
// source: protos/peer/peer.proto
// DO NOT EDIT!

package peer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DeployRequest_SourceType int32

const (
	DeployRequest_CLIENT DeployRequest_SourceType = 0
	DeployRequest_PEER   DeployRequest_SourceType = 1
)

var DeployRequest_SourceType_name = map[int32]string{
	0: "CLIENT",
	1: "PEER",
}
var DeployRequest_SourceType_value = map[string]int32{
	"CLIENT": 0,
	"PEER":   1,
}

func (x DeployRequest_SourceType) String() string {
	return proto.EnumName(DeployRequest_SourceType_name, int32(x))
}
func (DeployRequest_SourceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

type DeployRequest struct {
	Name    string                   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Frag    *Frag                    `protobuf:"bytes,2,opt,name=frag" json:"frag,omitempty"`
	Src     string                   `protobuf:"bytes,3,opt,name=src" json:"src,omitempty"`
	SrcType DeployRequest_SourceType `protobuf:"varint,4,opt,name=src_type,json=srcType,enum=cn.zumium.fyer.peer.DeployRequest_SourceType" json:"src_type,omitempty"`
}

func (m *DeployRequest) Reset()                    { *m = DeployRequest{} }
func (m *DeployRequest) String() string            { return proto.CompactTextString(m) }
func (*DeployRequest) ProtoMessage()               {}
func (*DeployRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *DeployRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeployRequest) GetFrag() *Frag {
	if m != nil {
		return m.Frag
	}
	return nil
}

func (m *DeployRequest) GetSrc() string {
	if m != nil {
		return m.Src
	}
	return ""
}

func (m *DeployRequest) GetSrcType() DeployRequest_SourceType {
	if m != nil {
		return m.SrcType
	}
	return DeployRequest_CLIENT
}

type FetchRequest struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	FragIndex uint64 `protobuf:"varint,2,opt,name=frag_index,json=fragIndex" json:"frag_index,omitempty"`
}

func (m *FetchRequest) Reset()                    { *m = FetchRequest{} }
func (m *FetchRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchRequest) ProtoMessage()               {}
func (*FetchRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *FetchRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FetchRequest) GetFragIndex() uint64 {
	if m != nil {
		return m.FragIndex
	}
	return 0
}

type FetchResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *FetchResponse) Reset()                    { *m = FetchResponse{} }
func (m *FetchResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchResponse) ProtoMessage()               {}
func (*FetchResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *FetchResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*DeployRequest)(nil), "cn.zumium.fyer.peer.DeployRequest")
	proto.RegisterType((*FetchRequest)(nil), "cn.zumium.fyer.peer.FetchRequest")
	proto.RegisterType((*FetchResponse)(nil), "cn.zumium.fyer.peer.FetchResponse")
	proto.RegisterEnum("cn.zumium.fyer.peer.DeployRequest_SourceType", DeployRequest_SourceType_name, DeployRequest_SourceType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FyerPeer service

type FyerPeerClient interface {
	Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error)
}

type fyerPeerClient struct {
	cc *grpc.ClientConn
}

func NewFyerPeerClient(cc *grpc.ClientConn) FyerPeerClient {
	return &fyerPeerClient{cc}
}

func (c *fyerPeerClient) Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/cn.zumium.fyer.peer.FyerPeer/Deploy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fyerPeerClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error) {
	out := new(FetchResponse)
	err := grpc.Invoke(ctx, "/cn.zumium.fyer.peer.FyerPeer/Fetch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FyerPeer service

type FyerPeerServer interface {
	Deploy(context.Context, *DeployRequest) (*google_protobuf.Empty, error)
	Fetch(context.Context, *FetchRequest) (*FetchResponse, error)
}

func RegisterFyerPeerServer(s *grpc.Server, srv FyerPeerServer) {
	s.RegisterService(&_FyerPeer_serviceDesc, srv)
}

func _FyerPeer_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FyerPeerServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cn.zumium.fyer.peer.FyerPeer/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FyerPeerServer).Deploy(ctx, req.(*DeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FyerPeer_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FyerPeerServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cn.zumium.fyer.peer.FyerPeer/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FyerPeerServer).Fetch(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FyerPeer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cn.zumium.fyer.peer.FyerPeer",
	HandlerType: (*FyerPeerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Deploy",
			Handler:    _FyerPeer_Deploy_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _FyerPeer_Fetch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/peer/peer.proto",
}

func init() { proto.RegisterFile("protos/peer/peer.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x51, 0xd1, 0x6a, 0xe2, 0x40,
	0x14, 0xdd, 0xac, 0x59, 0x57, 0xef, 0xea, 0x22, 0x53, 0x90, 0x98, 0x52, 0xd0, 0xe9, 0x8b, 0x2f,
	0x8e, 0x60, 0xbf, 0xa0, 0xad, 0x91, 0x0a, 0x45, 0x64, 0xea, 0x53, 0x5f, 0x24, 0xc6, 0x6b, 0x2a,
	0x98, 0xcc, 0x74, 0x26, 0x81, 0xa6, 0x5f, 0xd3, 0x6f, 0xea, 0x17, 0x95, 0x99, 0xb4, 0xb4, 0x16,
	0xb1, 0x2f, 0xc3, 0xe1, 0x70, 0xee, 0xb9, 0xe7, 0xcc, 0x85, 0xb6, 0x54, 0x22, 0x13, 0x7a, 0x28,
	0x11, 0x95, 0x7d, 0x98, 0x25, 0xc8, 0x49, 0x94, 0xb2, 0xe7, 0x3c, 0xd9, 0xe6, 0x09, 0xdb, 0x14,
	0x86, 0x45, 0x54, 0xfe, 0x69, 0x2c, 0x44, 0xbc, 0xc3, 0xa1, 0x95, 0xac, 0xf2, 0xcd, 0x10, 0x13,
	0x99, 0x15, 0xe5, 0x84, 0xbf, 0xe7, 0xb4, 0x51, 0x61, 0x5c, 0xf2, 0xf4, 0xd5, 0x81, 0xe6, 0x18,
	0xe5, 0x4e, 0x14, 0x1c, 0x1f, 0x73, 0xd4, 0x19, 0x21, 0xe0, 0xa6, 0x61, 0x82, 0x9e, 0xd3, 0x75,
	0xfa, 0x75, 0x6e, 0x31, 0x19, 0x80, 0x6b, 0x66, 0xbc, 0xdf, 0x5d, 0xa7, 0xff, 0x6f, 0xd4, 0x61,
	0x07, 0xd6, 0xb3, 0x89, 0x0a, 0x63, 0x6e, 0x65, 0xa4, 0x05, 0x15, 0xad, 0x22, 0xaf, 0x62, 0x1d,
	0x0c, 0x24, 0x37, 0x50, 0xd3, 0x2a, 0x5a, 0x66, 0x85, 0x44, 0xcf, 0xed, 0x3a, 0xfd, 0xff, 0xa3,
	0xc1, 0x41, 0x93, 0xbd, 0x28, 0xec, 0x4e, 0xe4, 0x2a, 0xc2, 0x45, 0x21, 0x91, 0xff, 0xd5, 0x2a,
	0x32, 0x80, 0x52, 0x80, 0x4f, 0x9a, 0x00, 0x54, 0xaf, 0x6f, 0xa7, 0xc1, 0x6c, 0xd1, 0xfa, 0x45,
	0x6a, 0xe0, 0xce, 0x83, 0x80, 0xb7, 0x1c, 0x7a, 0x09, 0x8d, 0x09, 0x66, 0xd1, 0xc3, 0xb1, 0x4a,
	0x67, 0x00, 0x26, 0xeb, 0x72, 0x9b, 0xae, 0xf1, 0xc9, 0x16, 0x73, 0x79, 0xdd, 0x30, 0x53, 0x43,
	0xd0, 0x73, 0x68, 0xbe, 0x5b, 0x68, 0x29, 0x52, 0x8d, 0xc6, 0x63, 0x1d, 0x66, 0xa1, 0xf5, 0x68,
	0x70, 0x8b, 0x47, 0x2f, 0x0e, 0xd4, 0x26, 0x05, 0xaa, 0x39, 0xa2, 0x22, 0x63, 0xa8, 0x96, 0xe9,
	0x09, 0xfd, 0xb9, 0x9a, 0xdf, 0x66, 0xe5, 0xb5, 0xd8, 0xc7, 0xb5, 0x58, 0x60, 0xae, 0x45, 0x66,
	0xf0, 0xc7, 0xee, 0x25, 0xbd, 0xc3, 0x9f, 0xfc, 0xa5, 0x96, 0x4f, 0x8f, 0x49, 0xca, 0xd8, 0x57,
	0x3d, 0xe8, 0x7c, 0x17, 0x99, 0x85, 0x56, 0x7a, 0xef, 0x9a, 0x77, 0x55, 0xb5, 0xcc, 0xc5, 0x5b,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xa7, 0xa9, 0x10, 0xc4, 0x6d, 0x02, 0x00, 0x00,
}
