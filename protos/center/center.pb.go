// Code generated by protoc-gen-go.
// source: protos/center/center.proto
// DO NOT EDIT!

/*
Package center is a generated protocol buffer package.

It is generated from these files:
	protos/center/center.proto

It has these top-level messages:
	RegisterRequest
	RegisterResponse
	RegisterPeerRequest
	RegisterPeerResponse
	FileInfoRequest
	FileInfoResponse
	PeerInfoRequest
	PeerInfoResponse
*/
package center

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegisterResponse_Status int32

const (
	RegisterResponse_FAILED RegisterResponse_Status = 0
	RegisterResponse_OK     RegisterResponse_Status = 1
)

var RegisterResponse_Status_name = map[int32]string{
	0: "FAILED",
	1: "OK",
}
var RegisterResponse_Status_value = map[string]int32{
	"FAILED": 0,
	"OK":     1,
}

func (x RegisterResponse_Status) String() string {
	return proto.EnumName(RegisterResponse_Status_name, int32(x))
}
func (RegisterResponse_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type RegisterPeerResponse_Status int32

const (
	RegisterPeerResponse_FAILED RegisterPeerResponse_Status = 0
	RegisterPeerResponse_OK     RegisterPeerResponse_Status = 1
)

var RegisterPeerResponse_Status_name = map[int32]string{
	0: "FAILED",
	1: "OK",
}
var RegisterPeerResponse_Status_value = map[string]int32{
	"FAILED": 0,
	"OK":     1,
}

func (x RegisterPeerResponse_Status) String() string {
	return proto.EnumName(RegisterPeerResponse_Status_name, int32(x))
}
func (RegisterPeerResponse_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 0}
}

type FileInfoResponse_Status int32

const (
	FileInfoResponse_NOT_FOUND FileInfoResponse_Status = 0
	FileInfoResponse_FOUND     FileInfoResponse_Status = 1
	FileInfoResponse_ERROR     FileInfoResponse_Status = 2
)

var FileInfoResponse_Status_name = map[int32]string{
	0: "NOT_FOUND",
	1: "FOUND",
	2: "ERROR",
}
var FileInfoResponse_Status_value = map[string]int32{
	"NOT_FOUND": 0,
	"FOUND":     1,
	"ERROR":     2,
}

func (x FileInfoResponse_Status) String() string {
	return proto.EnumName(FileInfoResponse_Status_name, int32(x))
}
func (FileInfoResponse_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

type PeerInfoResponse_Status int32

const (
	PeerInfoResponse_NOT_FOUND PeerInfoResponse_Status = 0
	PeerInfoResponse_ONLINE    PeerInfoResponse_Status = 1
)

var PeerInfoResponse_Status_name = map[int32]string{
	0: "NOT_FOUND",
	1: "ONLINE",
}
var PeerInfoResponse_Status_value = map[string]int32{
	"NOT_FOUND": 0,
	"ONLINE":    1,
}

func (x PeerInfoResponse_Status) String() string {
	return proto.EnumName(PeerInfoResponse_Status_name, int32(x))
}
func (PeerInfoResponse_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

type RegisterRequest struct {
	Name       string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Size       uint64 `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Hash       []byte `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	FragCount  uint64 `protobuf:"varint,4,opt,name=frag_count,json=fragCount" json:"frag_count,omitempty"`
	MerkleTree []byte `protobuf:"bytes,5,opt,name=merkle_tree,json=merkleTree,proto3" json:"merkle_tree,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RegisterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RegisterRequest) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *RegisterRequest) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *RegisterRequest) GetFragCount() uint64 {
	if m != nil {
		return m.FragCount
	}
	return 0
}

func (m *RegisterRequest) GetMerkleTree() []byte {
	if m != nil {
		return m.MerkleTree
	}
	return nil
}

type RegisterResponse struct {
	Status RegisterResponse_Status `protobuf:"varint,1,opt,name=status,enum=cn.zumium.fyer.center.RegisterResponse_Status" json:"status,omitempty"`
	Msg    string                  `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *RegisterResponse) Reset()                    { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()               {}
func (*RegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RegisterResponse) GetStatus() RegisterResponse_Status {
	if m != nil {
		return m.Status
	}
	return RegisterResponse_FAILED
}

func (m *RegisterResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type RegisterPeerRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *RegisterPeerRequest) Reset()                    { *m = RegisterPeerRequest{} }
func (m *RegisterPeerRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterPeerRequest) ProtoMessage()               {}
func (*RegisterPeerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RegisterPeerRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RegisterPeerRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type RegisterPeerResponse struct {
	Status  RegisterPeerResponse_Status `protobuf:"varint,1,opt,name=status,enum=cn.zumium.fyer.center.RegisterPeerResponse_Status" json:"status,omitempty"`
	Msg     string                      `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	LoginId string                      `protobuf:"bytes,3,opt,name=login_id,json=loginId" json:"login_id,omitempty"`
}

func (m *RegisterPeerResponse) Reset()                    { *m = RegisterPeerResponse{} }
func (m *RegisterPeerResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterPeerResponse) ProtoMessage()               {}
func (*RegisterPeerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RegisterPeerResponse) GetStatus() RegisterPeerResponse_Status {
	if m != nil {
		return m.Status
	}
	return RegisterPeerResponse_FAILED
}

func (m *RegisterPeerResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *RegisterPeerResponse) GetLoginId() string {
	if m != nil {
		return m.LoginId
	}
	return ""
}

type FileInfoRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *FileInfoRequest) Reset()                    { *m = FileInfoRequest{} }
func (m *FileInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*FileInfoRequest) ProtoMessage()               {}
func (*FileInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FileInfoRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type FileInfoResponse struct {
	Status     FileInfoResponse_Status `protobuf:"varint,1,opt,name=status,enum=cn.zumium.fyer.center.FileInfoResponse_Status" json:"status,omitempty"`
	Msg        string                  `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Size       uint64                  `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	Hash       []byte                  `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	FragCount  uint64                  `protobuf:"varint,5,opt,name=frag_count,json=fragCount" json:"frag_count,omitempty"`
	MerkleTree []byte                  `protobuf:"bytes,6,opt,name=merkle_tree,json=merkleTree,proto3" json:"merkle_tree,omitempty"`
}

func (m *FileInfoResponse) Reset()                    { *m = FileInfoResponse{} }
func (m *FileInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*FileInfoResponse) ProtoMessage()               {}
func (*FileInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FileInfoResponse) GetStatus() FileInfoResponse_Status {
	if m != nil {
		return m.Status
	}
	return FileInfoResponse_NOT_FOUND
}

func (m *FileInfoResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *FileInfoResponse) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *FileInfoResponse) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *FileInfoResponse) GetFragCount() uint64 {
	if m != nil {
		return m.FragCount
	}
	return 0
}

func (m *FileInfoResponse) GetMerkleTree() []byte {
	if m != nil {
		return m.MerkleTree
	}
	return nil
}

type PeerInfoRequest struct {
	LoginId string `protobuf:"bytes,1,opt,name=login_id,json=loginId" json:"login_id,omitempty"`
}

func (m *PeerInfoRequest) Reset()                    { *m = PeerInfoRequest{} }
func (m *PeerInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*PeerInfoRequest) ProtoMessage()               {}
func (*PeerInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PeerInfoRequest) GetLoginId() string {
	if m != nil {
		return m.LoginId
	}
	return ""
}

type PeerInfoResponse struct {
	Status   PeerInfoResponse_Status `protobuf:"varint,1,opt,name=status,enum=cn.zumium.fyer.center.PeerInfoResponse_Status" json:"status,omitempty"`
	Msg      string                  `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Username string                  `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	Address  string                  `protobuf:"bytes,4,opt,name=address" json:"address,omitempty"`
}

func (m *PeerInfoResponse) Reset()                    { *m = PeerInfoResponse{} }
func (m *PeerInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*PeerInfoResponse) ProtoMessage()               {}
func (*PeerInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PeerInfoResponse) GetStatus() PeerInfoResponse_Status {
	if m != nil {
		return m.Status
	}
	return PeerInfoResponse_NOT_FOUND
}

func (m *PeerInfoResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *PeerInfoResponse) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *PeerInfoResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*RegisterRequest)(nil), "cn.zumium.fyer.center.RegisterRequest")
	proto.RegisterType((*RegisterResponse)(nil), "cn.zumium.fyer.center.RegisterResponse")
	proto.RegisterType((*RegisterPeerRequest)(nil), "cn.zumium.fyer.center.RegisterPeerRequest")
	proto.RegisterType((*RegisterPeerResponse)(nil), "cn.zumium.fyer.center.RegisterPeerResponse")
	proto.RegisterType((*FileInfoRequest)(nil), "cn.zumium.fyer.center.FileInfoRequest")
	proto.RegisterType((*FileInfoResponse)(nil), "cn.zumium.fyer.center.FileInfoResponse")
	proto.RegisterType((*PeerInfoRequest)(nil), "cn.zumium.fyer.center.PeerInfoRequest")
	proto.RegisterType((*PeerInfoResponse)(nil), "cn.zumium.fyer.center.PeerInfoResponse")
	proto.RegisterEnum("cn.zumium.fyer.center.RegisterResponse_Status", RegisterResponse_Status_name, RegisterResponse_Status_value)
	proto.RegisterEnum("cn.zumium.fyer.center.RegisterPeerResponse_Status", RegisterPeerResponse_Status_name, RegisterPeerResponse_Status_value)
	proto.RegisterEnum("cn.zumium.fyer.center.FileInfoResponse_Status", FileInfoResponse_Status_name, FileInfoResponse_Status_value)
	proto.RegisterEnum("cn.zumium.fyer.center.PeerInfoResponse_Status", PeerInfoResponse_Status_name, PeerInfoResponse_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FyerCenter service

type FyerCenterClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	RegisterPeer(ctx context.Context, in *RegisterPeerRequest, opts ...grpc.CallOption) (*RegisterPeerResponse, error)
	FileInfo(ctx context.Context, in *FileInfoRequest, opts ...grpc.CallOption) (*FileInfoResponse, error)
	PeerInfo(ctx context.Context, in *PeerInfoRequest, opts ...grpc.CallOption) (*PeerInfoResponse, error)
}

type fyerCenterClient struct {
	cc *grpc.ClientConn
}

func NewFyerCenterClient(cc *grpc.ClientConn) FyerCenterClient {
	return &fyerCenterClient{cc}
}

func (c *fyerCenterClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := grpc.Invoke(ctx, "/cn.zumium.fyer.center.FyerCenter/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fyerCenterClient) RegisterPeer(ctx context.Context, in *RegisterPeerRequest, opts ...grpc.CallOption) (*RegisterPeerResponse, error) {
	out := new(RegisterPeerResponse)
	err := grpc.Invoke(ctx, "/cn.zumium.fyer.center.FyerCenter/RegisterPeer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fyerCenterClient) FileInfo(ctx context.Context, in *FileInfoRequest, opts ...grpc.CallOption) (*FileInfoResponse, error) {
	out := new(FileInfoResponse)
	err := grpc.Invoke(ctx, "/cn.zumium.fyer.center.FyerCenter/FileInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fyerCenterClient) PeerInfo(ctx context.Context, in *PeerInfoRequest, opts ...grpc.CallOption) (*PeerInfoResponse, error) {
	out := new(PeerInfoResponse)
	err := grpc.Invoke(ctx, "/cn.zumium.fyer.center.FyerCenter/PeerInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FyerCenter service

type FyerCenterServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	RegisterPeer(context.Context, *RegisterPeerRequest) (*RegisterPeerResponse, error)
	FileInfo(context.Context, *FileInfoRequest) (*FileInfoResponse, error)
	PeerInfo(context.Context, *PeerInfoRequest) (*PeerInfoResponse, error)
}

func RegisterFyerCenterServer(s *grpc.Server, srv FyerCenterServer) {
	s.RegisterService(&_FyerCenter_serviceDesc, srv)
}

func _FyerCenter_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FyerCenterServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cn.zumium.fyer.center.FyerCenter/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FyerCenterServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FyerCenter_RegisterPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FyerCenterServer).RegisterPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cn.zumium.fyer.center.FyerCenter/RegisterPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FyerCenterServer).RegisterPeer(ctx, req.(*RegisterPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FyerCenter_FileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FyerCenterServer).FileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cn.zumium.fyer.center.FyerCenter/FileInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FyerCenterServer).FileInfo(ctx, req.(*FileInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FyerCenter_PeerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FyerCenterServer).PeerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cn.zumium.fyer.center.FyerCenter/PeerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FyerCenterServer).PeerInfo(ctx, req.(*PeerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FyerCenter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cn.zumium.fyer.center.FyerCenter",
	HandlerType: (*FyerCenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _FyerCenter_Register_Handler,
		},
		{
			MethodName: "RegisterPeer",
			Handler:    _FyerCenter_RegisterPeer_Handler,
		},
		{
			MethodName: "FileInfo",
			Handler:    _FyerCenter_FileInfo_Handler,
		},
		{
			MethodName: "PeerInfo",
			Handler:    _FyerCenter_PeerInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/center/center.proto",
}

func init() { proto.RegisterFile("protos/center/center.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 540 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0xdd, 0x6e, 0xd3, 0x4c,
	0x10, 0xfd, 0x36, 0x3f, 0x6e, 0x3c, 0x5f, 0x21, 0xd6, 0x02, 0x92, 0x89, 0x40, 0x44, 0x46, 0x40,
	0xc4, 0x8f, 0x91, 0xc2, 0x13, 0x40, 0x49, 0xa4, 0x40, 0x89, 0xd1, 0x52, 0x6e, 0xe8, 0x45, 0x64,
	0xe2, 0x89, 0x6b, 0x11, 0xdb, 0x61, 0xd7, 0x16, 0x6a, 0x6f, 0xb9, 0x43, 0xf0, 0x28, 0x3c, 0x07,
	0xaf, 0x85, 0x76, 0x1d, 0x27, 0xae, 0x5b, 0xe3, 0xe6, 0xca, 0x33, 0xb3, 0x33, 0xb3, 0x7b, 0xce,
	0x9c, 0x31, 0xf4, 0x56, 0x3c, 0x4e, 0x62, 0xf1, 0x7c, 0x8e, 0x51, 0x82, 0x7c, 0xfd, 0xb1, 0x55,
	0x90, 0xde, 0x9a, 0x47, 0xf6, 0x59, 0x1a, 0x06, 0x69, 0x68, 0x2f, 0x4e, 0x91, 0xdb, 0xd9, 0xa1,
	0xf5, 0x8b, 0x40, 0x97, 0xa1, 0x1f, 0x88, 0x04, 0x39, 0xc3, 0xaf, 0x29, 0x8a, 0x84, 0x52, 0x68,
	0x45, 0x6e, 0x88, 0x26, 0xe9, 0x93, 0x81, 0xce, 0x94, 0x2d, 0x63, 0x22, 0x38, 0x43, 0xb3, 0xd1,
	0x27, 0x83, 0x16, 0x53, 0xb6, 0x8c, 0x9d, 0xb8, 0xe2, 0xc4, 0x6c, 0xf6, 0xc9, 0x60, 0x9f, 0x29,
	0x9b, 0xde, 0x05, 0x58, 0x70, 0xd7, 0x9f, 0xcd, 0xe3, 0x34, 0x4a, 0xcc, 0x96, 0xca, 0xd6, 0x65,
	0xe4, 0x40, 0x06, 0xe8, 0x3d, 0xf8, 0x3f, 0x44, 0xfe, 0x65, 0x89, 0xb3, 0x84, 0x23, 0x9a, 0x6d,
	0x55, 0x09, 0x59, 0xe8, 0x88, 0x23, 0x5a, 0x3f, 0x08, 0x18, 0xdb, 0xf7, 0x88, 0x55, 0x1c, 0x09,
	0xa4, 0x63, 0xd0, 0x44, 0xe2, 0x26, 0xa9, 0x50, 0x4f, 0xba, 0x3e, 0xb4, 0xed, 0x4b, 0xc1, 0xd8,
	0xe5, 0x42, 0xfb, 0x83, 0xaa, 0x62, 0xeb, 0x6a, 0x6a, 0x40, 0x33, 0x14, 0xbe, 0xc2, 0xa0, 0x33,
	0x69, 0x5a, 0x77, 0x40, 0xcb, 0x72, 0x28, 0x80, 0x36, 0x7e, 0x39, 0x39, 0x1c, 0xbd, 0x36, 0xfe,
	0xa3, 0x1a, 0x34, 0x9c, 0xb7, 0x06, 0xb1, 0xde, 0xc1, 0x8d, 0xbc, 0xe5, 0x7b, 0xdc, 0xf2, 0xd3,
	0x83, 0x4e, 0x2a, 0x90, 0x17, 0x38, 0xda, 0xf8, 0xf2, 0x6c, 0xe5, 0x0a, 0xf1, 0x2d, 0xe6, 0xde,
	0xfa, 0x9e, 0x8d, 0x6f, 0xfd, 0x26, 0x70, 0xf3, 0x7c, 0xbf, 0x35, 0xbe, 0x37, 0x25, 0x7c, 0xc3,
	0x1a, 0x7c, 0xc5, 0xe2, 0x5a, 0x8c, 0xf4, 0x36, 0x74, 0x96, 0xb1, 0x1f, 0x44, 0xb3, 0xc0, 0x53,
	0xa3, 0xd2, 0xd9, 0x9e, 0xf2, 0x27, 0x5e, 0x0d, 0xfc, 0x07, 0xd0, 0x1d, 0x07, 0x4b, 0x9c, 0x44,
	0x8b, 0xf8, 0x1f, 0xd2, 0xb0, 0xbe, 0x37, 0xc0, 0xd8, 0xe6, 0xed, 0x38, 0xb2, 0x72, 0x61, 0x3d,
	0x9c, 0x5c, 0x89, 0xcd, 0x4b, 0x94, 0xd8, 0xaa, 0x54, 0x62, 0xbb, 0x46, 0x89, 0xda, 0x05, 0x25,
	0x3e, 0xdb, 0x70, 0x73, 0x0d, 0xf4, 0xa9, 0x73, 0x34, 0x1b, 0x3b, 0x1f, 0xa7, 0x92, 0x1e, 0x1d,
	0xda, 0x99, 0x49, 0xa4, 0x39, 0x62, 0xcc, 0x61, 0x46, 0xc3, 0x7a, 0x0a, 0x5d, 0x39, 0x96, 0x22,
	0x59, 0x45, 0xe2, 0xc9, 0x79, 0xe2, 0xff, 0x10, 0x30, 0xb6, 0xe9, 0x3b, 0x72, 0x56, 0x2e, 0xac,
	0xe7, 0xac, 0xa8, 0xd8, 0x66, 0x49, 0xb1, 0x26, 0xec, 0xb9, 0x9e, 0xc7, 0x51, 0x08, 0x45, 0x9f,
	0xce, 0x72, 0xd7, 0xba, 0x5f, 0xc5, 0x00, 0x80, 0xe6, 0x4c, 0x0f, 0x27, 0xd3, 0x91, 0x41, 0x86,
	0x3f, 0x9b, 0x00, 0xe3, 0x53, 0xe4, 0x07, 0xea, 0x6d, 0xf4, 0x18, 0x3a, 0xb9, 0x4a, 0xe9, 0xc3,
	0xda, 0x35, 0x55, 0x3c, 0xf5, 0x1e, 0x5d, 0x71, 0x9d, 0xa9, 0x0f, 0xfb, 0xc5, 0x15, 0xa0, 0x8f,
	0xaf, 0xb4, 0x27, 0xd9, 0x25, 0x4f, 0x76, 0xd8, 0x29, 0x89, 0x22, 0x17, 0x66, 0x25, 0x8a, 0xd2,
	0x6a, 0x54, 0xa2, 0xb8, 0xb0, 0x1a, 0xc7, 0xd0, 0xc9, 0x27, 0x58, 0xd9, 0xbc, 0x24, 0xa5, 0xca,
	0xe6, 0x65, 0x29, 0xbc, 0xea, 0x7c, 0xd2, 0xb2, 0xa3, 0xcf, 0x9a, 0xfa, 0xef, 0xbf, 0xf8, 0x1b,
	0x00, 0x00, 0xff, 0xff, 0x99, 0x56, 0xaa, 0x85, 0x15, 0x06, 0x00, 0x00,
}
