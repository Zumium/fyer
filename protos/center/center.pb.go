// Code generated by protoc-gen-go.
// source: protos/center/center.proto
// DO NOT EDIT!

/*
Package center is a generated protocol buffer package.

It is generated from these files:
	protos/center/center.proto

It has these top-level messages:
	RegisterRequest
	FilesResponse
	FileInfoRequest
	FileInfoResponse
	PeerInfoRequest
	PeerInfoResponse
	FragInfoRequest
	FragInfoResponse
	FragDistributionRequest
	FragDistributionResponse
*/
package center

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegisterRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Size uint64 `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Hash []byte `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	//    uint64 frag_count = 4;
	//    bytes merkle_tree= 5;
	Source string `protobuf:"bytes,4,opt,name=source" json:"source,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RegisterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RegisterRequest) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *RegisterRequest) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *RegisterRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

type FilesResponse struct {
	Files []string `protobuf:"bytes,1,rep,name=files" json:"files,omitempty"`
}

func (m *FilesResponse) Reset()                    { *m = FilesResponse{} }
func (m *FilesResponse) String() string            { return proto.CompactTextString(m) }
func (*FilesResponse) ProtoMessage()               {}
func (*FilesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FilesResponse) GetFiles() []string {
	if m != nil {
		return m.Files
	}
	return nil
}

type FileInfoRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *FileInfoRequest) Reset()                    { *m = FileInfoRequest{} }
func (m *FileInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*FileInfoRequest) ProtoMessage()               {}
func (*FileInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FileInfoRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type FileInfoResponse struct {
	Size       uint64                      `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
	Hash       []byte                      `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	FragCount  uint64                      `protobuf:"varint,3,opt,name=frag_count,json=fragCount" json:"frag_count,omitempty"`
	UploadTime *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=upload_time,json=uploadTime" json:"upload_time,omitempty"`
}

func (m *FileInfoResponse) Reset()                    { *m = FileInfoResponse{} }
func (m *FileInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*FileInfoResponse) ProtoMessage()               {}
func (*FileInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FileInfoResponse) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *FileInfoResponse) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *FileInfoResponse) GetFragCount() uint64 {
	if m != nil {
		return m.FragCount
	}
	return 0
}

func (m *FileInfoResponse) GetUploadTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.UploadTime
	}
	return nil
}

type PeerInfoRequest struct {
	PeerId string `protobuf:"bytes,1,opt,name=peer_id,json=peerId" json:"peer_id,omitempty"`
}

func (m *PeerInfoRequest) Reset()                    { *m = PeerInfoRequest{} }
func (m *PeerInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*PeerInfoRequest) ProtoMessage()               {}
func (*PeerInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PeerInfoRequest) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

type PeerInfoResponse struct {
	// string username = 3;
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *PeerInfoResponse) Reset()                    { *m = PeerInfoResponse{} }
func (m *PeerInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*PeerInfoResponse) ProtoMessage()               {}
func (*PeerInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PeerInfoResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type FragInfoRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *FragInfoRequest) Reset()                    { *m = FragInfoRequest{} }
func (m *FragInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*FragInfoRequest) ProtoMessage()               {}
func (*FragInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *FragInfoRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type FragInfoResponse struct {
	Frags []byte `protobuf:"bytes,1,opt,name=frags,proto3" json:"frags,omitempty"`
}

func (m *FragInfoResponse) Reset()                    { *m = FragInfoResponse{} }
func (m *FragInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*FragInfoResponse) ProtoMessage()               {}
func (*FragInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *FragInfoResponse) GetFrags() []byte {
	if m != nil {
		return m.Frags
	}
	return nil
}

type FragDistributionRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *FragDistributionRequest) Reset()                    { *m = FragDistributionRequest{} }
func (m *FragDistributionRequest) String() string            { return proto.CompactTextString(m) }
func (*FragDistributionRequest) ProtoMessage()               {}
func (*FragDistributionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *FragDistributionRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type FragDistributionResponse struct {
	Distribution []*FragDistributionResponse_PeerList `protobuf:"bytes,1,rep,name=distribution" json:"distribution,omitempty"`
}

func (m *FragDistributionResponse) Reset()                    { *m = FragDistributionResponse{} }
func (m *FragDistributionResponse) String() string            { return proto.CompactTextString(m) }
func (*FragDistributionResponse) ProtoMessage()               {}
func (*FragDistributionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *FragDistributionResponse) GetDistribution() []*FragDistributionResponse_PeerList {
	if m != nil {
		return m.Distribution
	}
	return nil
}

type FragDistributionResponse_PeerList struct {
	Peers []string `protobuf:"bytes,1,rep,name=peers" json:"peers,omitempty"`
}

func (m *FragDistributionResponse_PeerList) Reset()         { *m = FragDistributionResponse_PeerList{} }
func (m *FragDistributionResponse_PeerList) String() string { return proto.CompactTextString(m) }
func (*FragDistributionResponse_PeerList) ProtoMessage()    {}
func (*FragDistributionResponse_PeerList) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{9, 0}
}

func (m *FragDistributionResponse_PeerList) GetPeers() []string {
	if m != nil {
		return m.Peers
	}
	return nil
}

func init() {
	proto.RegisterType((*RegisterRequest)(nil), "cn.zumium.fyer.center.RegisterRequest")
	proto.RegisterType((*FilesResponse)(nil), "cn.zumium.fyer.center.FilesResponse")
	proto.RegisterType((*FileInfoRequest)(nil), "cn.zumium.fyer.center.FileInfoRequest")
	proto.RegisterType((*FileInfoResponse)(nil), "cn.zumium.fyer.center.FileInfoResponse")
	proto.RegisterType((*PeerInfoRequest)(nil), "cn.zumium.fyer.center.PeerInfoRequest")
	proto.RegisterType((*PeerInfoResponse)(nil), "cn.zumium.fyer.center.PeerInfoResponse")
	proto.RegisterType((*FragInfoRequest)(nil), "cn.zumium.fyer.center.FragInfoRequest")
	proto.RegisterType((*FragInfoResponse)(nil), "cn.zumium.fyer.center.FragInfoResponse")
	proto.RegisterType((*FragDistributionRequest)(nil), "cn.zumium.fyer.center.FragDistributionRequest")
	proto.RegisterType((*FragDistributionResponse)(nil), "cn.zumium.fyer.center.FragDistributionResponse")
	proto.RegisterType((*FragDistributionResponse_PeerList)(nil), "cn.zumium.fyer.center.FragDistributionResponse.PeerList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FyerCenter service

type FyerCenterClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// rpc RegisterPeer (RegisterPeerRequest) returns (google.protobuf.Empty);
	Files(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*FilesResponse, error)
	FileInfo(ctx context.Context, in *FileInfoRequest, opts ...grpc.CallOption) (*FileInfoResponse, error)
	PeerInfo(ctx context.Context, in *PeerInfoRequest, opts ...grpc.CallOption) (*PeerInfoResponse, error)
	FragInfo(ctx context.Context, in *FragInfoRequest, opts ...grpc.CallOption) (*FragInfoResponse, error)
	FragDistribution(ctx context.Context, in *FragDistributionRequest, opts ...grpc.CallOption) (*FragDistributionResponse, error)
}

type fyerCenterClient struct {
	cc *grpc.ClientConn
}

func NewFyerCenterClient(cc *grpc.ClientConn) FyerCenterClient {
	return &fyerCenterClient{cc}
}

func (c *fyerCenterClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/cn.zumium.fyer.center.FyerCenter/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fyerCenterClient) Files(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*FilesResponse, error) {
	out := new(FilesResponse)
	err := grpc.Invoke(ctx, "/cn.zumium.fyer.center.FyerCenter/Files", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fyerCenterClient) FileInfo(ctx context.Context, in *FileInfoRequest, opts ...grpc.CallOption) (*FileInfoResponse, error) {
	out := new(FileInfoResponse)
	err := grpc.Invoke(ctx, "/cn.zumium.fyer.center.FyerCenter/FileInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fyerCenterClient) PeerInfo(ctx context.Context, in *PeerInfoRequest, opts ...grpc.CallOption) (*PeerInfoResponse, error) {
	out := new(PeerInfoResponse)
	err := grpc.Invoke(ctx, "/cn.zumium.fyer.center.FyerCenter/PeerInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fyerCenterClient) FragInfo(ctx context.Context, in *FragInfoRequest, opts ...grpc.CallOption) (*FragInfoResponse, error) {
	out := new(FragInfoResponse)
	err := grpc.Invoke(ctx, "/cn.zumium.fyer.center.FyerCenter/FragInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fyerCenterClient) FragDistribution(ctx context.Context, in *FragDistributionRequest, opts ...grpc.CallOption) (*FragDistributionResponse, error) {
	out := new(FragDistributionResponse)
	err := grpc.Invoke(ctx, "/cn.zumium.fyer.center.FyerCenter/FragDistribution", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FyerCenter service

type FyerCenterServer interface {
	Register(context.Context, *RegisterRequest) (*google_protobuf.Empty, error)
	// rpc RegisterPeer (RegisterPeerRequest) returns (google.protobuf.Empty);
	Files(context.Context, *google_protobuf.Empty) (*FilesResponse, error)
	FileInfo(context.Context, *FileInfoRequest) (*FileInfoResponse, error)
	PeerInfo(context.Context, *PeerInfoRequest) (*PeerInfoResponse, error)
	FragInfo(context.Context, *FragInfoRequest) (*FragInfoResponse, error)
	FragDistribution(context.Context, *FragDistributionRequest) (*FragDistributionResponse, error)
}

func RegisterFyerCenterServer(s *grpc.Server, srv FyerCenterServer) {
	s.RegisterService(&_FyerCenter_serviceDesc, srv)
}

func _FyerCenter_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FyerCenterServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cn.zumium.fyer.center.FyerCenter/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FyerCenterServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FyerCenter_Files_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FyerCenterServer).Files(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cn.zumium.fyer.center.FyerCenter/Files",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FyerCenterServer).Files(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FyerCenter_FileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FyerCenterServer).FileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cn.zumium.fyer.center.FyerCenter/FileInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FyerCenterServer).FileInfo(ctx, req.(*FileInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FyerCenter_PeerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FyerCenterServer).PeerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cn.zumium.fyer.center.FyerCenter/PeerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FyerCenterServer).PeerInfo(ctx, req.(*PeerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FyerCenter_FragInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FragInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FyerCenterServer).FragInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cn.zumium.fyer.center.FyerCenter/FragInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FyerCenterServer).FragInfo(ctx, req.(*FragInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FyerCenter_FragDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FragDistributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FyerCenterServer).FragDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cn.zumium.fyer.center.FyerCenter/FragDistribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FyerCenterServer).FragDistribution(ctx, req.(*FragDistributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FyerCenter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cn.zumium.fyer.center.FyerCenter",
	HandlerType: (*FyerCenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _FyerCenter_Register_Handler,
		},
		{
			MethodName: "Files",
			Handler:    _FyerCenter_Files_Handler,
		},
		{
			MethodName: "FileInfo",
			Handler:    _FyerCenter_FileInfo_Handler,
		},
		{
			MethodName: "PeerInfo",
			Handler:    _FyerCenter_PeerInfo_Handler,
		},
		{
			MethodName: "FragInfo",
			Handler:    _FyerCenter_FragInfo_Handler,
		},
		{
			MethodName: "FragDistribution",
			Handler:    _FyerCenter_FragDistribution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/center/center.proto",
}

func init() { proto.RegisterFile("protos/center/center.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 537 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x93, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x95, 0xad, 0xeb, 0xda, 0xd7, 0xa2, 0x56, 0x16, 0x6c, 0x51, 0x26, 0x44, 0x15, 0x51,
	0xa8, 0x10, 0xb8, 0x52, 0xb9, 0x20, 0x71, 0x63, 0x6c, 0xd2, 0x10, 0x07, 0x64, 0x71, 0x02, 0xa4,
	0x2a, 0x6d, 0x5e, 0xb3, 0x48, 0x4d, 0x1c, 0x6c, 0xe7, 0xd0, 0x7d, 0x10, 0x0e, 0x7c, 0x05, 0xbe,
	0x24, 0xb2, 0x9d, 0xd0, 0x34, 0x5d, 0x36, 0x76, 0x8a, 0xdf, 0xf3, 0xdf, 0xcf, 0xff, 0xf7, 0xfc,
	0x0b, 0x78, 0x99, 0xe0, 0x8a, 0xcb, 0xe9, 0x12, 0x53, 0x85, 0xa2, 0xf8, 0x50, 0x93, 0x24, 0x4f,
	0x96, 0x29, 0xbd, 0xc9, 0x93, 0x38, 0x4f, 0xe8, 0x6a, 0x83, 0x82, 0xda, 0x4d, 0xef, 0x2c, 0xe2,
	0x3c, 0x5a, 0xe3, 0xd4, 0x88, 0x16, 0xf9, 0x6a, 0x8a, 0x49, 0xa6, 0x36, 0xf6, 0x8c, 0xf7, 0xac,
	0xbe, 0xa9, 0xe2, 0x04, 0xa5, 0x0a, 0x92, 0xcc, 0x0a, 0x7c, 0x84, 0x01, 0xc3, 0x28, 0x96, 0x0a,
	0x05, 0xc3, 0x9f, 0x39, 0x4a, 0x45, 0x08, 0xb4, 0xd2, 0x20, 0x41, 0xd7, 0x19, 0x39, 0x93, 0x2e,
	0x33, 0x6b, 0x9d, 0x93, 0xf1, 0x0d, 0xba, 0x07, 0x23, 0x67, 0xd2, 0x62, 0x66, 0xad, 0x73, 0xd7,
	0x81, 0xbc, 0x76, 0x0f, 0x47, 0xce, 0xa4, 0xcf, 0xcc, 0x9a, 0x9c, 0x40, 0x5b, 0xf2, 0x5c, 0x2c,
	0xd1, 0x6d, 0x99, 0xd3, 0x45, 0xe4, 0x8f, 0xe1, 0xd1, 0x65, 0xbc, 0x46, 0xc9, 0x50, 0x66, 0x3c,
	0x95, 0x48, 0x1e, 0xc3, 0xd1, 0x4a, 0x27, 0x5c, 0x67, 0x74, 0x38, 0xe9, 0x32, 0x1b, 0xf8, 0x63,
	0x18, 0x68, 0xd9, 0x55, 0xba, 0xe2, 0x77, 0xb8, 0xf1, 0x7f, 0x39, 0x30, 0xdc, 0xea, 0x8a, 0x8a,
	0xa5, 0x45, 0xe7, 0x16, 0x8b, 0x07, 0x15, 0x8b, 0x4f, 0x01, 0x56, 0x22, 0x88, 0xe6, 0x4b, 0x9e,
	0xa7, 0xca, 0x98, 0x6f, 0xb1, 0xae, 0xce, 0x9c, 0xeb, 0x04, 0x79, 0x0f, 0xbd, 0x3c, 0x5b, 0xf3,
	0x20, 0x9c, 0xeb, 0x51, 0x99, 0x36, 0x7a, 0x33, 0x8f, 0xda, 0x39, 0xd2, 0x72, 0x8e, 0xf4, 0x6b,
	0x39, 0x47, 0x06, 0x56, 0xae, 0x13, 0xfe, 0x2b, 0x18, 0x7c, 0x41, 0x14, 0x55, 0xff, 0xa7, 0x70,
	0x9c, 0x21, 0x8a, 0x79, 0x1c, 0x16, 0x2d, 0xb4, 0x75, 0x78, 0x15, 0xfa, 0xaf, 0x61, 0xb8, 0xd5,
	0x16, 0x3d, 0xb8, 0x70, 0x1c, 0x84, 0xa1, 0x40, 0x29, 0x0b, 0x71, 0x19, 0x9a, 0xc9, 0x88, 0x20,
	0xba, 0x6f, 0x32, 0x13, 0x18, 0x6e, 0x65, 0x95, 0x51, 0x8b, 0x20, 0xb2, 0x25, 0xfb, 0xcc, 0x06,
	0xfe, 0x1b, 0x38, 0xd5, 0xca, 0x8f, 0xb1, 0x54, 0x22, 0x5e, 0xe4, 0x2a, 0xe6, 0xe9, 0x5d, 0x85,
	0x7f, 0x3b, 0xe0, 0xee, 0xeb, 0x8b, 0x1b, 0x7e, 0x40, 0x3f, 0xac, 0xe4, 0xcd, 0x9b, 0xf6, 0x66,
	0xef, 0xe8, 0xad, 0xc0, 0xd2, 0xa6, 0x32, 0x54, 0x8f, 0xe3, 0x73, 0x2c, 0x15, 0xdb, 0xa9, 0xe6,
	0x8d, 0xa0, 0x53, 0xee, 0xe8, 0x5e, 0xf4, 0xf8, 0xfe, 0x61, 0x63, 0x82, 0xd9, 0x9f, 0x16, 0xc0,
	0xe5, 0x06, 0xc5, 0xb9, 0xb9, 0x80, 0x7c, 0x82, 0x4e, 0xc9, 0x34, 0x79, 0xd1, 0x60, 0xa2, 0x06,
	0xbd, 0x77, 0xb2, 0xf7, 0xc2, 0x17, 0xfa, 0x37, 0x22, 0x17, 0x70, 0x64, 0xc0, 0x25, 0x0d, 0x02,
	0xef, 0x79, 0x53, 0x97, 0x3b, 0xb8, 0x7f, 0x87, 0x4e, 0x09, 0x6c, 0xa3, 0xa5, 0x1a, 0xf9, 0xde,
	0xcb, 0x7b, 0x75, 0xdb, 0xe2, 0x25, 0x49, 0x8d, 0xc5, 0x6b, 0x58, 0x36, 0x16, 0xdf, 0x43, 0x52,
	0x3b, 0x2f, 0x88, 0x6a, 0x76, 0xbe, 0x4b, 0x66, 0xb3, 0xf3, 0x3a, 0x9a, 0xd2, 0xe2, 0x5a, 0xa5,
	0x81, 0xd0, 0xff, 0xc6, 0xc6, 0x5e, 0x36, 0x7d, 0x20, 0x66, 0x1f, 0xc6, 0x70, 0x56, 0x3b, 0x61,
	0x9e, 0xb4, 0x38, 0xf7, 0xad, 0x6d, 0xbf, 0x8b, 0xb6, 0xc9, 0xbe, 0xfd, 0x1b, 0x00, 0x00, 0xff,
	0xff, 0x6f, 0x9a, 0xb0, 0x3b, 0x93, 0x05, 0x00, 0x00,
}
